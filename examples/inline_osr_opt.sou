function main ()
version inlined_version
 var user_input = nil
 read user_input
 var local_var = (3 + user_input)
 var res = nil
 var choice = user_input
 >cp_0: assume [(choice != 0)] else (foo, anon, cp_0) [var choice = choice], (main, anon, cp_4) [var foo_res = $, var local_var = local_var, var user_input = user_input]
 drop choice
 drop res
 print 0
 print local_var
version anon
 var user_input = nil
 read user_input
 var local_var = (3 + user_input)
 call foo_res = 'foo (user_input)
 >cp_4: assume [] else (main, anon, cp_4) [var foo_res = foo_res, var local_var = local_var, var user_input = user_input]
 print foo_res
 print local_var
function foo (var choice)
version anon_1
 >cp_0: assume [(choice != 0)] else (foo, anon, cp_0) [var choice = choice]
 return 0
version anon
 >cp_0: assume [] else (foo, anon, cp_0) [var choice = choice]
 branch (choice == 0) $a $b
$a:
 return 1
$b:
 return 0
