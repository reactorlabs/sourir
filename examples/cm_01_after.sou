function main ()

version active
 # Based on a whiteboard example that also involves branch pruning
 # AFTER
 var zero = 0
 var one = 1
 var two = 2
 var w1 = 10
 var w2 = 20
 var x = 30
 var z = 0
 read z
 >deopt: assume [(z != zero)] else (main,old,deopt) [var one = one, var two = two, var w1 = w1, var w2 = w2, var x = x, var z = z, var zero = zero]
 x <- (x + two)
 # This assignment can be moved
 w1 <- (w1 + one)
 print w1
 print w2
 w2 <- (w2 + one)
 print w2
 print x
 stop 0

version old
 # Based on a whiteboard example that also involves branch pruning
 # BEFORE
 var zero = 0
 var one = 1
 var two = 2
 var w1 = 10
 var w2 = 20
 var x = 30
 var z = 0
 read z
 >deopt: assume [] else (main,old,deopt) [var one = one, var two = two, var w1 = w1, var w2 = w2, var x = x, var z = z, var zero = zero]
 branch (z == zero) $l1 $l2
$l1:
 x <- (x + one)
 goto end
$l2:
 x <- (x + two)
 goto end
end:
 # This assignment can be moved
 w1 <- (w1 + one)
 print w1
 print w2
 w2 <- (w2 + one)
 print w2
 print x
 stop 0
