program: BRANCH NIL DOLLAR IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 159.
##
## instruction -> BRANCH expression DOLLAR label . DOLLAR label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## BRANCH expression DOLLAR label 
##

Parsing an instruction, we parsed "branch <expr> $<label>" so far;
a label, for example "$foo", is now expected to construct a branch
instruction
"branch <expr> $<label> $<label>".

program: BRANCH NIL TRIPLE_DOT 
##
## Ends in an error in state: 157.
##
## instruction -> BRANCH expression . DOLLAR label DOLLAR label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## BRANCH expression 
##

Parsing an instruction, we parsed "branch <expr>" so far; a label, for
example "$foo", is now expected to construct a branch instruction
"branch <expr> $<label> $<label>".

program: BRANCH TRIPLE_DOT 
##
## Ends in an error in state: 156.
##
## instruction -> BRANCH . expression DOLLAR label DOLLAR label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## BRANCH 
##

Parsing an instruction, we parsed "branch" so far; an expression, for
example "(x == 2)", is now expected to construct a branch instruction
"branch <expr> $<label> $<label>".

program: VAR IDENTIFIER EQUAL TRIPLE_DOT 
##
## Ends in an error in state: 32.
##
## var_def -> VAR variable EQUAL . expression [ RBRACKET NEWLINE COMMA ]
##
## The known suffix of the stack is as follows:
## VAR variable EQUAL 
##

Parsing an instruction, we parsed "var <var> =" so far; an expression, for
example "(x + 1)", is now expected to construct a variable declaration
"var <var> = <expr>".

program: VAR IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 31.
##
## var_def -> VAR variable . EQUAL expression [ RBRACKET NEWLINE COMMA ]
## var_def -> VAR variable . [ RBRACKET NEWLINE COMMA ]
##
## The known suffix of the stack is as follows:
## VAR variable 
##

Parsing an instruction, we parsed "var <var>" so far; the equal sign
"=" is now expected to construct a variable declaration
"var <var> = <expr>".

program: VAR TRIPLE_DOT 
##
## Ends in an error in state: 30.
##
## var_def -> VAR . variable EQUAL expression [ RBRACKET NEWLINE COMMA ]
## var_def -> VAR . variable [ RBRACKET NEWLINE COMMA ]
##
## The known suffix of the stack is as follows:
## VAR 
##

Parsing an instruction, we parsed "const" so far; a variable, for
example "x", is now expected to construct a variable declaration
"var <var> = <expr>".

program: GOTO TRIPLE_DOT 
##
## Ends in an error in state: 135.
##
## instruction -> GOTO . label [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## GOTO 
##

Parsing an instruction, we parsed "goto" so far; a label, for example
"foo", is now expected to construct a goto instruction
"goto <label>".

program: IDENTIFIER LEFTARROW TRIPLE_DOT 
##
## Ends in an error in state: 174.
##
## instruction -> variable LEFTARROW . expression [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## variable LEFTARROW 
##

Parsing an instruction, we parsed "<var> <-" so far; an expression,
for example "(x + 1)", is now expected to construct an assignment
"<var> <- <expression>".

program: IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 82.
##
## label -> IDENTIFIER . [ COLON ]
## variable -> IDENTIFIER . [ LEFTARROW LBRACKET ]
##
## The known suffix of the stack is as follows:
## IDENTIFIER 
##

Parsing an instruction, we parsed an identifier so far (variable or label). 
- if this is a label declaration, we expect a semicolon: "<label>:"
- if this is an assignment, we expect a left arrow: "<var> <- <expression>"

program: GT IDENTIFIER COLON ASSUME LBRACKET RBRACKET ELSE LPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAREN LBRACKET RBRACKET COMMA LPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAREN LBRACKET TRIPLE_DOT 
##
## Ends in an error in state: 122.
##
## extra_frame -> LPAREN label COMMA label COMMA label RPAREN LBRACKET . VAR variable EQUAL DOLLAR list(preceded(COMMA,varmap_entry)) RBRACKET [ NEWLINE COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN label COMMA label COMMA label RPAREN LBRACKET 
##

There was an error parsing the variable map of an extra frame. The extra
frame varmap syntax is "[var x = $, ...]"
Note that the first variable binding in the environment mapping needs to
capture the result register "$".
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".

program: GT IDENTIFIER COLON ASSUME LBRACKET RBRACKET ELSE LPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAREN LBRACKET RBRACKET COMMA TRIPLE_DOT 
##
## Ends in an error in state: 114.
##
## list(preceded(COMMA,extra_frame)) -> COMMA . extra_frame list(preceded(COMMA,extra_frame)) [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## COMMA 
##

There was an error parsing the specification of an extra frame. The extra
frame syntax is "(func_label, vers_label, label) [var x = $, ...]"
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".

program: GT IDENTIFIER COLON ASSUME LBRACKET NIL RBRACKET ELSE LPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAREN LBRACKET TRIPLE_DOT 
##
## Ends in an error in state: 105.
##
## varmap -> LBRACKET . loption(separated_nonempty_list(COMMA,varmap_entry)) RBRACKET [ NEWLINE COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACKET 
##

There was an error parsing the specification of the new environment of an
assume instruction. The specification is a comma-separated list of terms of the form
"var x = e" (where "e" is an expression).
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".

program: GT IDENTIFIER COLON ASSUME LBRACKET NIL RBRACKET ELSE LPAREN IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER RPAREN TRIPLE_DOT 
##
## Ends in an error in state: 104.
##
## instruction -> GT label COLON ASSUME LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET ELSE LPAREN label COMMA label COMMA label RPAREN . varmap list(preceded(COMMA,extra_frame)) [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## GT label COLON ASSUME LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET ELSE LPAREN label COMMA label COMMA label RPAREN 
##

After "assume [...] (...) " we expect the specification of the new environment.
It is a square bracket enclosed, comma-separated list
of terms of the form "var x = e" (where "e" is an expression).
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".


program: GT IDENTIFIER COLON ASSUME LBRACKET NIL RBRACKET ELSE LPAREN TRIPLE_DOT 
##
## Ends in an error in state: 98.
##
## instruction -> GT label COLON ASSUME LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET ELSE LPAREN . label COMMA label COMMA label RPAREN varmap list(preceded(COMMA,extra_frame)) [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## GT label COLON ASSUME LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET ELSE LPAREN 
##

Parsing an assume instruction, there is an error with the syntax of the target
location "(function, version, label)".
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".

program: GT IDENTIFIER COLON ASSUME LBRACKET NIL RBRACKET TRIPLE_DOT 
##
## Ends in an error in state: 96.
##
## instruction -> GT label COLON ASSUME LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET . ELSE LPAREN label COMMA label COMMA label RPAREN varmap list(preceded(COMMA,extra_frame)) [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## GT label COLON ASSUME LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET 
##

Parsing an assume instruction, we parsed "assume l [<expr> ...]", and are
now expecting a target location "(function, version, label)".
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".

program: GT IDENTIFIER COLON ASSUME LBRACKET TRIPLE_DOT 
##
## Ends in an error in state: 94.
##
## instruction -> GT label COLON ASSUME LBRACKET . loption(separated_nonempty_list(COMMA,expression)) RBRACKET ELSE LPAREN label COMMA label COMMA label RPAREN varmap list(preceded(COMMA,extra_frame)) [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## GT label COLON ASSUME LBRACKET 
##

Parsing an assume instruction, there was an error parsing the list of conditions.
Conditions are expressions like "(x == 2)".
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".

program: GT IDENTIFIER COLON ASSUME TRIPLE_DOT 
##
## Ends in an error in state: 93.
##
## instruction -> GT label COLON ASSUME . LBRACKET loption(separated_nonempty_list(COMMA,expression)) RBRACKET ELSE LPAREN label COMMA label COMMA label RPAREN varmap list(preceded(COMMA,extra_frame)) [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## GT label COLON ASSUME 
##

Parsing an assume instruction, we parsed "assume", and are now expecting a bracket
enclosed list of conditions. Conditions are expressions like "(x == 2)".
The complete instruction syntax is "assume <label> [<conditions>] <frame> <extra_frame>*",
where <frame> is "(func_label, vers_label, label) [<varmap>*]"
and <extra_frame> is "(func_label, vers_label, label) [var res = $, <varmap>*]"
and <varmap> is "var x = exp"
For example,
">l: assume [(a==1)] else (Main,optimized,l2) [var x = e, var y = y, var z], (f,v,l) [var y = $, var z = (1+x)]".

program: LBRACE IDENTIFIER COMMA STOP 
##
## Ends in an error in state: 9.
##
## scope -> variable COMMA . scope [ RBRACE ]
##
## The known suffix of the stack is as follows:
## variable COMMA 
##

Parsing a scope annotation, we expect a comma-separated list of
variables between curly brackets, for example "{ x, y }", the last
element possibly being "...", for example "{ x, y, ...}". ("..." means
that we are not restricting the instruction to use only the variables
listed, we are only asking that at least those variables be present in
scope.)

program: LBRACE IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 8.
##
## scope -> variable . COMMA scope [ RBRACE ]
## scope -> variable . [ RBRACE ]
##
## The known suffix of the stack is as follows:
## variable 
##

Parsing a scope annotation, we expect a comma-separated list of
variables between curly brackets, for example "{ x, y }", the last
element possibly being "...", for example "{ x, y, ...}". ("..." means
that we are not restricting the instruction to use only the variables
listed, we are only asking that at least those variables be present in
scope.)

program: LBRACE STOP 
##
## Ends in an error in state: 5.
##
## scope_annotation -> LBRACE . scope RBRACE optional_newlines [ VAR STOP RETURN READ PRINT IDENTIFIER GUARD_HINT GT GOTO DROP DOLLAR COMMENT CALL BRANCH ASSERT ARRAY ]
##
## The known suffix of the stack is as follows:
## LBRACE 
##

Parsing a scope annotation, we expect a comma-separated list of
variables between curly brackets, for example "{ x, y }", the last
element possibly being "...", for example "{ x, y, ...}". ("..." means
that we are not restricting the instruction to use only the variables
listed, we are only asking that at least those variables be present in
scope.)

program: LBRACE TRIPLE_DOT RBRACE BOOL 
##
## Ends in an error in state: 12.
##
## scope_annotation -> LBRACE scope RBRACE . optional_newlines [ VAR STOP RETURN READ PRINT IDENTIFIER GUARD_HINT GT GOTO DROP DOLLAR COMMENT CALL BRANCH ASSERT ARRAY ]
##
## The known suffix of the stack is as follows:
## LBRACE scope RBRACE 
##

We parsed a scope annotation, and we now expect an instruction
followed by a line break.

program: LBRACE TRIPLE_DOT TRIPLE_DOT 
##
## Ends in an error in state: 11.
##
## scope_annotation -> LBRACE scope . RBRACE optional_newlines [ VAR STOP RETURN READ PRINT IDENTIFIER GUARD_HINT GT GOTO DROP DOLLAR COMMENT CALL BRANCH ASSERT ARRAY ]
##
## The known suffix of the stack is as follows:
## LBRACE scope 
##

In a scope annotation, "..." should be the last item. "{ x, ... }" or
"{ ... }" are valid, but "{ ..., x }" is not.

program: PRINT LPAREN IDENTIFIER PLUS IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 58.
##
## expression -> LPAREN simple_expression infixop simple_expression . RPAREN [ RPAREN RBRACKET NEWLINE LPAREN DOLLAR COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN simple_expression infixop simple_expression 
##

Parsing an expression, we parsed "( <arg> <op> <arg>" so far;
a closing parenthesis ")" is now expected.

program: PRINT LPAREN IDENTIFIER PLUS TRIPLE_DOT 
##
## Ends in an error in state: 57.
##
## expression -> LPAREN simple_expression infixop . simple_expression RPAREN [ RPAREN RBRACKET NEWLINE LPAREN DOLLAR COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN simple_expression infixop 
##

Parsing an expression, we parsed "( <arg> <op>" so far; an argument
(variable or literal value) is now expected to construct an expression
"( <arg> <op> <arg> )".

program: PRINT LPAREN IDENTIFIER TRIPLE_DOT 
##
## Ends in an error in state: 43.
##
## expression -> LPAREN simple_expression . infixop simple_expression RPAREN [ RPAREN RBRACKET NEWLINE LPAREN DOLLAR COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN simple_expression 
##

Parsing an expression, we parsed "( <arg>" so far; an operator such as
"+", "==" or "!=" is now expected to construct an expression
"( <var> <op> <var> )".

program: PRINT LPAREN TRIPLE_DOT 
##
## Ends in an error in state: 37.
##
## expression -> LPAREN . simple_expression infixop simple_expression RPAREN [ RPAREN RBRACKET NEWLINE LPAREN DOLLAR COMMA ]
## expression -> LPAREN . prefixop simple_expression RPAREN [ RPAREN RBRACKET NEWLINE LPAREN DOLLAR COMMA ]
##
## The known suffix of the stack is as follows:
## LPAREN 
##

Parsing an expression, we parsed "(" so far; an argument (variable or
literal value) is now expected to construct an expression
"( <arg> <op> <arg> )".

program: PRINT TRIPLE_DOT 
##
## Ends in an error in state: 80.
##
## instruction -> PRINT . expression [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## PRINT 
##

Parsing an instruction, we parsed "print" so far;
an expression, for example "(x + 1)", is now expected
to construct a print instruction
"print <expr>".

program: READ TRIPLE_DOT 
##
## Ends in an error in state: 78.
##
## instruction -> READ . variable [ NEWLINE ]
##
## The known suffix of the stack is as follows:
## READ 
##

Parsing an instruction, we parsed "read" so far;
a variable, for example "x", is now expected
to construct a read assignment
"read <var>".

program: STOP NIL NEWLINE TRIPLE_DOT 
##
## Ends in an error in state: 185.
##
## instruction_line -> scope_annotation instruction NEWLINE . optional_newlines [ VERSION VAR STOP RETURN READ PRINT LBRACE IDENTIFIER GUARD_HINT GT GOTO FUNCTION EOF DROP DOLLAR COMMENT CALL BRANCH ASSERT ARRAY ]
##
## The known suffix of the stack is as follows:
## scope_annotation instruction NEWLINE 
##

We parsed a complete instruction line, and are now inspecting a valid
instruction on the next line, or the end of the file.

program: STOP NIL TRIPLE_DOT 
##
## Ends in an error in state: 184.
##
## instruction_line -> scope_annotation instruction . NEWLINE optional_newlines [ VERSION VAR STOP RETURN READ PRINT LBRACE IDENTIFIER GUARD_HINT GT GOTO FUNCTION EOF DROP DOLLAR COMMENT CALL BRANCH ASSERT ARRAY ]
##
## The known suffix of the stack is as follows:
## scope_annotation instruction 
##

We parsed an instruction, and are now expecting a newline to complete
the instruction line -- even if this is the last instruction, it
should be followed by a line break.

program: TRIPLE_DOT 
##
## Ends in an error in state: 0.
##
## program' -> . program [ # ]
##
## The known suffix of the stack is as follows:
## 
##

We parsed a correct program so far; extra instructions, or the end of
the file, are now expected.

